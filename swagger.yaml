openapi: 3.0.3
info:
  title: Blood Management System
  version: 1.0.0
  description:
    "The Blood Donation Management System backend is designed to provide
    REST APIs for blood donation activities including donor information management,
    blood request processing, and role-based access control. The system will support
    multiple microservices with appropriate authentication and authorization mechanisms.
    "
  contact:
    email: mr.monirul.dev@gmail.com
    name: Monirul Islam
    url: http://github.com/codemonkmi
servers:
  - url: http://localhost:4000/api/v1
    description: dev server
tags:
  - name: Auth
    description: Operations related to Auth
  - name: Users
    description: Operations related to Users
  - name: Donation
    description: Operations related to Donation
  - name: Notifications
    description: Operations related to Notifications
paths:
  /auth/register:
    post:
      tags:
        - Auth
      description: Register new account
      summary: Register new account
      requestBody:
        description: Register New account
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterDTO"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    format: boolean
                    example: true
                  message:
                    type: string
                    format: string
                    example: User register successfully
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        format: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /auth/login
                      me:
                        type: string
                        format: url
                        example: /auth/me
                      request:
                        type: string
                        format: url
                        example: /request
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /auth/login:
    post:
      tags:
        - Auth
      description: Login existing account
      summary: Login to account
      requestBody:
        description: Login credentials
        content:
          application/json:
            schema:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  example: securePassword123
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    format: boolean
                    example: true
                  message:
                    type: string
                    format: string
                    example: User register successfully
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        format: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /auth/login
                      me:
                        type: string
                        format: url
                        example: /auth/me
                      request:
                        type: string
                        format: url
                        example: /request
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"

  /auth/me:
    get:
      security:
        - BearerAuth: []
      tags:
        - Auth
      description: Authenticated User Data
      summary: Retrieve authenticated user data
      parameters:
        - $ref: "#/components/parameters/expandParam"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                required:
                  - success
                  - message
                  - data
                  - links
                type: object
                properties:
                  success:
                    type: boolean
                    format: boolean
                    example: true
                  message:
                    type: string
                    format: string
                    example: User register successfully
                  data:
                    allOf:
                      - $ref: "#/components/schemas/User"
                      - $ref: "#/components/schemas/Timestamp"

                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /auth/me
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"

  /auth/authorize:
    post:
      security:
        - BearerAuth: []
      tags:
        - Auth
      description: Authorize user to perform actions via Permission Manager
      summary: Authorize user to perform actions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum:
                    - super_admin
                    - admin
                    - user
                  example: user
                permissions:
                  type: string
                  format: string
                  example: user:get
                route:
                  type: string
                  format: url
                  example: /user
                method:
                  type: string
                  enum:
                    - get
                    - post
                    - patch
                    - delete
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    format: boolean
                    example: true
                  message:
                    type: string
                    format: string
                    example: User authorized
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /users:
    get:
      security:
        - BearerAuth: []
      tags:
        - Users
      description: Retrieve all users with pagination data
      summary: Retrieve Users
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
      responses:
        200:
          description: User retrieve
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    format: boolean
                    example: true
                  message:
                    type: string
                    format: string
                    example: User retrieve successfully
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/User"
                        - $ref: "#/components/schemas/Timestamp"
                        - type: object
                          properties:
                            link:
                              type: string
                              example: /users/1
                  pagination:
                    $ref: "#/components/schemas/PaginationMetadata"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /users
                      prev:
                        type: string
                        format: url
                        example: /user?page=1
                      next:
                        type: string
                        format: url
                        example: /user?page=3
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

    post:
      security:
        - BearerAuth: []
      tags:
        - Users
      description: Create new users
      summary: Create new user
      requestBody:
        description: Account Data
        content:
          application/json:
            schema:
              required:
                - name
                - photoUrls
              type: object
              properties:
                fullname:
                  type: string
                  format: string
                  example: John dog
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  example: securePassword123
                blood:
                  type: string
                  enum:
                    - A_POSITIVE
                    - A_NEGATIVE
                    - B_POSITIVE
                    - B_NEGATIVE
                    - AB_POSITIVE
                    - AB_NEGATIVE
                    - O_POSITIVE
                    - O_NEGATIVE
                phone:
                  type: string
                  example: 01900000000
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    format: boolean
                    example: true
                  message:
                    type: string
                    format: string
                    example: User register successfully
                  data:
                    allOf:
                      - $ref: "#/components/schemas/User"
                      - $ref: "#/components/schemas/Timestamp"
                      - type: object
                        properties:
                          link:
                            type: object
                            example: /users/1
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /users/1
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /users/{id}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Users
      description: Retrieve single user with a a user id
      summary: Retrieve a single user
      parameters:
        - $ref: "#/components/parameters/idParam"
        - $ref: "#/components/parameters/expandParam"
      responses:
        200:
          description: Single User retrieve
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    format: boolean
                    example: true
                  message:
                    type: string
                    format: string
                    example: User retrieve successfully
                  data:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/User"
                      - $ref: "#/components/schemas/Timestamp"
                      - type: object
                        properties:
                          profile:
                            allOf:
                              - $ref: "#/components/schemas/Profile"
                              - $ref: "#/components/schemas/Timestamp"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /users/1
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

    patch:
      security:
        - BearerAuth: []
      tags:
        - Users
      description: Update Existing user
      summary: Update  user
      parameters:
        - $ref: "#/components/parameters/idParam"
      requestBody:
        description: Account Data
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                  format: string
                  example: John dog
                email:
                  type: string
                  format: email
                blood:
                  type: string
                  enum:
                    - A_POSITIVE
                    - A_NEGATIVE
                    - B_POSITIVE
                    - B_NEGATIVE
                    - AB_POSITIVE
                    - AB_NEGATIVE
                    - O_POSITIVE
                    - O_NEGATIVE
                phone:
                  type: string
                  example: 01900000000
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    format: boolean
                    example: true
                  message:
                    type: string
                    format: string
                    example: User updated successfully
                  data:
                    allOf:
                      - $ref: "#/components/schemas/User"
                      - $ref: "#/components/schemas/Timestamp"
                      - type: object
                        properties:
                          link:
                            type: object
                            example: /users/1
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /users/1
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

    delete:
      security:
        - BearerAuth: []
      tags:
        - Users
      description: Update User with give user id
      summary: Update User
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        204:
          description: Delete successful
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"

  /user/{id}/verify:
    patch:
      security:
        - BearerAuth: []
      tags:
        - Users
      description: Verify newly registered user
      summary: Verify user
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    format: boolean
                    example: true
                  message:
                    type: string
                    format: string
                    example: User verified successfully
                  data:
                    allOf:
                      - $ref: "#/components/schemas/User"
                      - $ref: "#/components/schemas/Timestamp"
                      - type: object
                        properties:
                          link:
                            type: object
                            example: /users/1
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /users/1
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /user/{id}/promote:
    patch:
      security:
        - BearerAuth: []
      tags:
        - Users
      description: Promote user
      summary: Promote user
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    format: boolean
                    example: true
                  message:
                    type: string
                    format: string
                    example: User promoted successfully
                  data:
                    allOf:
                      - $ref: "#/components/schemas/User"
                      - $ref: "#/components/schemas/Timestamp"
                      - type: object
                        properties:
                          link:
                            type: object
                            example: /users/1
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /users/1
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /user/{id}/demote:
    patch:
      security:
        - BearerAuth: []
      tags:
        - Users
      description: Demote user
      summary: Demote user
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    format: boolean
                    example: true
                  message:
                    type: string
                    format: string
                    example: User demoted successfully
                  data:
                    allOf:
                      - $ref: "#/components/schemas/User"
                      - $ref: "#/components/schemas/Timestamp"
                      - type: object
                        properties:
                          link:
                            type: object
                            example: /users/1
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /users/1
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /user/{id}/profile:
    get:
      security:
        - BearerAuth: []
      tags:
        - Users
      description: Get user profile
      summary: User profile
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    format: boolean
                    example: true
                  message:
                    type: string
                    format: string
                    example: User demoted successfully
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Profile"
                      - $ref: "#/components/schemas/Timestamp"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /users/2/profile
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

    patch:
      security:
        - BearerAuth: []
      tags:
        - Users
      description: Update Profile data
      summary: Update Profile
      requestBody:
        description: Account Data
        content:
          application/json:
            schema:
              required:
                - name
                - photoUrls
              type: object
              properties:
                fullname:
                  type: string
                  example: John Doe
                fatherName:
                  type: string
                  example: John Doe
                motherName:
                  type: string
                  example: John Doe
                address:
                  type: string
                  format: New Market
                upzila:
                  type: string
                  example: Sador
                zila:
                  type: string
                  example: Jashore
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    format: boolean
                    example: true
                  message:
                    type: string
                    format: string
                    example: User profile updated successfully
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Profile"
                      - $ref: "#/components/schemas/Timestamp"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /users/2/profile
                      user:
                        type: string
                        format: url
                        example: /users/2
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

  /requests:
    get:
      security:
        - BearerAuth: []
      tags:
        - Donation
      summary: Get All Requests
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/DonationRequested"
                        - $ref: "#/components/schemas/Timestamp"
                        - type: object
                          properties:
                            link:
                              type: string
                              example: /request/2
                  pagination:
                    $ref: "#/components/schemas/PaginationMetadata"
                  link:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /request
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
      description: Performs GET operation on /requests

    post:
      tags:
        - Donation
      summary: Submit Blood Request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BloodRequestDTO"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            type: string
                            example: req_001
                          status:
                            $ref: "#/components/schemas/DonationStatus"

                      - type: object
                        properties:
                          id:
                            type: string
                            example: 2
                          name:
                            type: string
                            example: Monirul Islam
                          phone:
                            type: string
                            example: "01234567890"
                          address:
                            type: string
                            example: Dhaka, Bangladesh
                          date:
                            type: string
                            format: date-time
                          blood:
                            $ref: "#/components/schemas/BloodType"
                          description:
                            type: string
                            example: "Blood tech is a general term that can refer to several different, but related, professions in the healthcare field"
                          status:
                            $ref: "#/components/schemas/DonationStatus"
                      - $ref: "#/components/schemas/Timestamp"
                  link:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /request
        400:
          $ref: "#/components/responses/400"
        500:
          $ref: "#/components/responses/500"
      description: Performs POST operation on /requests

  /requests/{id}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Donation
      summary: Get Request
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: Request Successful
                  data:
                    allOf:
                      - $ref: "#/components/schemas/DonationRequested"
                      - $ref: "#/components/schemas/Timestamp"
                  link:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /request/2
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      description: Performs GET operation on /requests/{id}

    patch:
      security:
        - BearerAuth: []
      tags:
        - Donation
      summary: Update Request
      parameters:
        - $ref: "#/components/parameters/idParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BloodRequestUpdateDTO"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: Request updated Successful
                  data:
                    allOf:
                      - $ref: "#/components/schemas/DonationRequested"
                      - $ref: "#/components/schemas/Timestamp"
                  link:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /request/2
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      description: Performs PATCH operation on /requests/{id}

  /requests/{id}/verify:
    patch:
      security:
        - BearerAuth: []
      tags:
        - Donation
      summary: Verify Request
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Success
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      description: Performs PATCH operation on /requests/{id}/verify

  /history:
    get:
      security:
        - BearerAuth: []
      tags:
        - Donation
      summary: Get All History
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - in: query
          name: request
          description: Request Id
          required: false
          schema:
            type: string
            default: c6f73c4b-f20c-4601-9a57-5ce999233e33

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/DonationHistory"
                        - $ref: "#/components/schemas/Timestamp"
                        - type: object
                          properties:
                            link:
                              type: string
                              example: /history/2
                  pagination:
                    $ref: "#/components/schemas/PaginationMetadata"
                  link:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /history
                      prev:
                        type: string
                        example: /history?page=1
                      next:
                        type: string
                        example: /history?page=3
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      description: Performs GET operation on /history

    post:
      security:
        - BearerAuth: []
      tags:
        - Donation
      summary: Create History
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HistoryCreateDTO"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    allOf:
                      - $ref: "#/components/schemas/DonationHistory"
                      - $ref: "#/components/schemas/Timestamp"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /history/2
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      description: Performs POST operation on /history

  /history/{id}:
    get:
      security:
        - BearerAuth: []
      tags:
        - Donation
      summary: Get Single History
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    allOf:
                      - $ref: "#/components/schemas/DonationHistory"
                      - $ref: "#/components/schemas/Timestamp"
                  link:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /history/2
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
      description: Performs GET operation on /history/{id}

  /notifications/mail:
    post:
      security:
        - BearerAuth: []
      summary: Send Mail Notification
      description: Sends a mail notification to a user. Accessible only by admin users.
      tags:
        - Notifications

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MailNotificationDTO"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: "#/components/schemas/MailNotification"
                  link:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /history
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    BloodType:
      type: string
      enum:
        - A_POSITIVE
        - A_NEGATIVE
        - B_POSITIVE
        - B_NEGATIVE
        - AB_POSITIVE
        - AB_NEGATIVE
        - O_POSITIVE
        - O_NEGATIVE
    DonationHistory:
      type: object
      properties:
        id:
          type: string
          example: 2
        donor:
          type: string
          description: User ID of the donor
          example: 1
        request:
          type: string
          description: User ID of the requester
          example: 2
        status:
          $ref: "#/components/schemas/DonationStatus"
        message:
          type: string
          example: Status updated to progress
      required:
        - id
        - donor
        - request
        - status
        - message
    DonationRequested:
      type: object
      properties:
        id:
          type: string
          example: 2
        name:
          type: string
          example: Monirul Islam
        phone:
          type: string
          example: "01234567890"
        address:
          type: string
          example: Dhaka, Bangladesh
        date:
          type: string
          format: date-time
        blood:
          $ref: "#/components/schemas/BloodType"
        description:
          type: string
          example: "Blood tech is a general term that can refer to several different, but related, professions in the healthcare field"
        status:
          $ref: "#/components/schemas/DonationStatus"
        metadata:
          type: object
        donor:
          type: string
          example: 1
        details:
          type: string
          example: "Blood tech is a general term that can refer to several different, but related, professions in the healthcare field."

      required:
        - id
        - name
        - phone
        - address
        - date
        - blood
        - status

    DonationStatus:
      type: string
      enum:
        - pending
        - verified
        - progress
        - ready
        - hold
        - completed

    Email:
      type: object
      properties:
        id:
          type: string
          example: 1
        title:
          type: string
          example: Simple Title
        description:
          type: string
          example: Simple description
        user_id:
          type: string
          example: 1
        sender_mail:
          type: string
          format: email
        status:
          $ref: "#/components/schemas/Status"
        priority:
          $ref: "#/components/schemas/Priority"

      required:
        - id
        - title
        - description
        - user_id
        - senderMail
        - status
        - priority

    Id:
      type: string
      format: string
      example: 2
    MailNotification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        title:
          type: string
          example: title
        message:
          type: string
          example: "Blood tech is a general term that can refer to several different, but related, professions in the healthcare field."
        type:
          type: string
          enum:
            - BLOOD_REQUEST
            - ADMIN_MESSAGE
      required:
        - id
        - user_id
        - title
        - message
        - type
    PaginationMetadata:
      type: object
      properties:
        page:
          type: integer
          example: 2
        limit:
          type: integer
          example: 10
        totalItems:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10
        next:
          type: integer
          nullable: true
          example: 3
        prev:
          type: integer
          nullable: true
          example: 1

      required:
        - page
        - limit
        - totalItems
        - totalPages
    Priority:
      type: string
      enum:
        - low
        - moderate
        - high
        - very_high

    Profile:
      type: object
      properties:
        fullname:
          type: string
          example: Monirul Islam
        father_name:
          type: string
          nullable: true
        mother_name:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        upzila:
          type: string
          nullable: true
        zila:
          type: string
          nullable: true
      required:
        - fullname
    Status:
      type: string
      enum:
        - pending
        - progress
        - failed
        - completed
        - hold

    Timestamp:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          example: "2024-06-20T12:34:56Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-06-21T08:45:00Z"
      required:
        - created_at
        - updated_at
    User:
      type: object
      properties:
        id:
          type: string
          example: 1
        email:
          type: string
          format: email
        status:
          $ref: "#/components/schemas/Status"
        blood:
          $ref: "#/components/schemas/BloodType"
        phone_no:
          type: string
          nullable: true
        last_donation:
          type: string
          format: date-time
          nullable: true

      required:
        - id
        - email
        - status
        - blood

    HistoryCreateDTO:
      type: object
      required:
        - donor
        - request
        - status
        - message
      properties:
        donor:
          type: string
          example: 1
        request:
          type: string
          example: 1
        status:
          $ref: "#/components/schemas/DonationStatus"
        message:
          $ref: "#/components/schemas/BloodType"
    BloodRequestDTO:
      type: object
      required:
        - name
        - phone
        - address
        - date
        - blood
        - description
      properties:
        name:
          type: string
          example: John Doe
        phone:
          type: string
          example: 01234567890
        address:
          type: string
          example: Dhaka Bangladesh
        date:
          type: string
          format: date-time
        blood:
          $ref: "#/components/schemas/BloodType"
        description:
          type: string
          example: Need for pregnancy operations
    BloodRequestUpdateDTO:
      type: object
      properties:
        name:
          type: string
        phone:
          type: string
        address:
          type: string
        blood:
          $ref: "#/components/schemas/BloodType"
        date:
          type: string
          format: date-time
        description:
          type: string
        status:
          $ref: "#/components/schemas/DonationStatus"

      required:
        - name
        - phone
        - address
        - blood
        - date
        - description
        - status
    MailNotificationDTO:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        title:
          type: string
        message:
          type: string
        type:
          type: string
          enum:
            - BLOOD_REQUEST
            - ADMIN_MESSAGE
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - user_id
        - title
        - message
        - type
    RegisterDTO:
      required:
        - fullname
        - email
        - password
        - blood
        - phone
      type: object
      properties:
        fullname:
          type: string
          format: string
          example: John dog
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          example: securePassword123
        blood:
          $ref: "#/components/schemas/BloodType"
        phone:
          type: string
          example: 01900000000

  parameters:
    pageParam:
      name: page
      in: query
      description: The page number to retrieve
      required: false
      schema:
        type: integer
        default: 2
        minimum: 1
    limitParam:
      in: query
      name: limit
      description: Number of items per page
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100
    expandParam:
      in: query
      name: expand
      description: Expand
      required: false
      schema:
        type: string
        enum:
          - profile
    idParam:
      in: path
      name: id
      description: Resource Id
      schema:
        type: string
        example: 2
      required: true
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                format: boolean
                example: false
              message:
                type: string
                format: string
                example: Bad request
              data:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                      format: string
                      example: too_small
                    pathname:
                      type: array
                      items:
                        type: string
                        format: string
                        example: id
                    message:
                      type: string
                      format: string
                      example: Invalid id
    401:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                format: boolean
                example: false
              message:
                type: string
                format: string
                example: Unauthorized
    403:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                format: boolean
                example: false
              message:
                type: string
                format: string
                example: You are not authorized to perform this actions
    404:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                format: boolean
                example: false
              message:
                type: string
                format: string
                example: Your requested resource not found!
    500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                format: boolean
                example: false
              message:
                type: string
                format: string
                example: We sorry for the inconvenience. We will fix this asap
  examples: {}
  requestBodies: {}
  headers: {}
